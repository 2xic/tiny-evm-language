
// Handles the transfer function of the ETH balances
function readTransferEntry {
    // NOTE: We have no while loops in this language, we need to recursively call this function 

    // TODO: Instead of doing MLOAD, we can just reuse the stack
    assembly {
        // CMP that we are not at the end yet
        PUSH0;
        MLOAD;
        PUSH1 32;
        MLOAD;
        EQ;
        ISZERO;
    }

    // Need to re-enter the function until we are done.
    if (stack_top_is_zero == 0){
        assembly {
            // Load in the data ? 
            PUSH0;
            MLOAD;
            PUSH1 1;
            ADD;
            DUP1;
            PUSH0;
            MSTORE;

            // Calculat the offset
            PUSH1 32;
            MUL; 

            // Load in the first list value
            DUP1;
            PUSH1 64;
            MLOAD;
            ADD;
            CALLDATALOAD;

            // Load in the second list value 
            DUP2;
            PUSH1 96;
            MLOAD;
            ADD;
            CALLDATALOAD;

            // Call the transfer 
            PUSH0;   // retSize
            PUSH0;   // retOffset
            PUSH0;   // argSize
            PUSH0;   // argOffset
            DUP5;    // value
            DUP7;    // address
            GAS;
            CALL;
        }

        readTransferEntry;
    }
}

// TODO: Rewrite it in a way so that it reuses the same function as above, but only with a parameter to specify if you are doing eth / erc20 / erc721
function readERC20TransferEntry {
    // We have no while loops, we need to recursively call this function 

    // TODO: Instead of doing MLOAD, we can just reuse the stack
    assembly {
        // CMP that we are not at the end yet
        PUSH0;
        MLOAD;
        PUSH1 32;
        MLOAD;
        EQ;
        ISZERO;
    }

    // Only walk into this function if it's close to the top .... 
    if (stack_top_is_zero == 0){
        // Need to re-enter the function until we are done.
        assembly {
            // Load in the data ? 
            PUSH0;
            MLOAD;
            PUSH1 1;
            ADD;
            DUP1;
            PUSH0;
            MSTORE;

            // Load in the array index
            PUSH1 32;
            MUL; 

            // Load in first list value
            DUP1;
            PUSH1 64;
            MLOAD;
            ADD;
            CALLDATALOAD;
            PUSH1 164;
            MSTORE; 

            // Load in the second entry 
            DUP1;
            PUSH1 96;
            MLOAD;
            ADD;
            CALLDATALOAD;
            PUSH1 196;
            MSTORE; 

            // Call the token
            PUSH0;      // retSize
            PUSH0;      // retOffset
            PUSH1 68;   // argSize
            PUSH1 160;  // argOffset
            PUSH0;      // value
            // TODO: This should also just be a stack entry
            // Load in the token address
            PUSH1  128;
            MLOAD;
            GAS;
            CALL;
        }

        readERC20TransferEntry;
    }
}


// TODO: Rewrite it in a way so that it reuses the same function as above, but only with a parameter to specify if you are doing eth / erc20 / erc721
function readTransferErc721Entry {
    // We have no while loops, we need to recursively call this function 

    // TODO: Instead of doing MLOAD, we can just reuse the stack
    assembly {
        // CMP that we are not at the end yet
        PUSH0;
        MLOAD;
        PUSH1 32;
        MLOAD;
        EQ;
        ISZERO;
    }

    // Need to re-enter the function until we are done.
    if (stack_top_is_zero == 0){
        assembly {
            PUSH0;
            MLOAD;
            PUSH1 1;
            ADD;
            DUP1;
            PUSH0;
            MSTORE;

            // Load in first index
            PUSH1 32;
            MUL; 

            // Load in first array entry
            DUP1;
            PUSH1 64;
            MLOAD;
            ADD;
            CALLDATALOAD;
            PUSH1 196;
            MSTORE;

            // Load in the second entry 
            DUP1;
            PUSH1 96;
            MLOAD;
            ADD;
            CALLDATALOAD;
            PUSH1 228;
            MSTORE; 

            // Do the call
            PUSH0;          // retSize
            PUSH0;          // retOffset
            PUSH1 200;      // argSize
            PUSH1 160;      // argOffset
            PUSH0;          // value
            // TODO: Make this be on the stack instead
            // Load in the token address
            PUSH1   128;
            MLOAD;
            GAS;
            CALL;
        }

        readTransferErc721Entry;
    }
}

// function airdropETH(address[] calldata, uint256[] calldata)
if (sighash == 0xc1a38006) {
    assembly {
        // Global index pointer 
        PUSH0;
        PUSH1 1; 
        MSTORE;
                
        // Load in the first offset
        PUSH1 4;
        DUP1;
        CALLDATALOAD;
        ADD;
        PUSH1 64;
        MSTORE;    

        // Now we also load in the size pointer to slot 2
        PUSH1 36;
        CALLDATALOAD;
        PUSH1 4;
        ADD;
        PUSH1 96;
        MSTORE; 

        // Load in the size of array
        PUSH1 64;
        MLOAD;
        CALLDATALOAD;
        PUSH1 32;
        MSTORE;

        //  0, 32 -> indexes
        // 64, 96 -> Data offset locations
    };

    // Call the function to read out all the entries
    readTransferEntry;
} else {
    // function airdropERC20(Erc20Like token,address[] calldata recivers,uint256[] calldata data,uint256 _totalTokens)
    if (sighash == 0x82947abe) {
        assembly {
            // [FIRST TRANSFER TOKENS TO THIS CONTRACT] 
            // Load in the signature of the `transferFrom` function
            PUSH32 0x23b872dd00000000000000000000000000000000000000000000000000000000;
            PUSH0;
            MSTORE;
            // Load in the dropper contract stored in the constructor
            PUSH0;
            SLOAD;
            PUSH1 4;
            MSTORE;
            // Get our contract address
            ADDRESS;
            PUSH1 36;
            MSTORE;
            // Need to load in the last total supply argument of the calldata
            PUSH1 100;
            CALLDATALOAD;
            PUSH1 68;
            MSTORE; 
            //  

            // Load in the token contract
            PUSH1 4;
            CALLDATALOAD;
            DUP1;
            // Store the token information
            PUSH1 128;
            MSTORE;
            // MEMORY SHOULD NOW BE [transferfrom sighash][dropper contract][our contract][total supply]
            //                              4                 36          68               100
            // We can now call the token contract
            PUSH0;      // retSize
            PUSH0;      // retOffset
            PUSH1 128;  // argSize 
            PUSH0;      // argOffset
            PUSH0;      // value
            DUP6;       // address
            GAS;        // GAS
            CALL;

            // [LOAD IN THE SIZE OF ARRAYS] 
            // Size of the first array will match the second one so we use that to track the location.

            // Global index pointer
            PUSH0;
            PUSH0;
            MSTORE; 
                    
            // Load in the first array entry
            // [sighahs][token][array1 *here*]
            PUSH1 36;
            CALLDATALOAD;
            PUSH1 4;
            ADD;
            DUP1;
            PUSH1 64;
            MSTORE;

            // Now we also load in the size pointer to slot 2
            // [sighahs][token][array1][array2 *here*]
            PUSH1 68;
            CALLDATALOAD;
            PUSH1 4;
            ADD;
            PUSH1 96;
            MSTORE; 

            // Now we specify the length
            CALLDATALOAD;
            PUSH1 32;
            MSTORE;

            // First four bytes for the transferFrom function
            PUSH32 0xa9059cbb00000000000000000000000000000000000000000000000000000000;
            PUSH1 160;
            MSTORE;

            //  0, 32 -> indexes
            // 64, 96 -> Locations of the arrays
            // 128 -> Token contract
            // 160 -> sighash
            // 160 + receiver and amount (done in readERC20TransferEntry)
        }

        readERC20TransferEntry;
    } else {
        // SHOULD GET OUT THE SLOAD DATA TO SHOW THE USER
        if (sighash == 0x2d4be470) {
            assembly {
                PUSH0;
                SLOAD;
                PUSH0;
                MSTORE;
                PUSH1 32;
                PUSH0;
                RETURN;
            };
        } else {
            // set dropper -> Should load in data and store it 
            if (sighash == 0x8c10f4fc) {
                assembly {
                    PUSH1 4;
                    CALLDATALOAD;
                    PUSH0;
                    SSTORE;
                    STOP;
                }
            }
            else {
                assembly {
                    // Global index pointer
                    PUSH0; 
                    PUSH0;
                    MSTORE; 
                            
                    // Load in the first array entry
                    // [sighahs][token][array1 *here*]
                    PUSH1 36;
                    CALLDATALOAD;
                    PUSH1 4;
                    ADD;
                    DUP1;
                    PUSH1 64;
                    MSTORE;

                    // Now we also load in the size pointer to slot 2
                    // [sighahs][token][array1][array2 *here*]
                    PUSH1 68;
                    CALLDATALOAD;
                    PUSH1 4;
                    ADD;
                    PUSH1 96;
                    MSTORE; 

                    // Now we specify the length
                    CALLDATALOAD;
                    PUSH1 32;
                    MSTORE;

                    // First four bytes for the transferFrom function
                    PUSH32 0x23b872dd00000000000000000000000000000000000000000000000000000000;
                    PUSH1 160;
                    MSTORE;
                    PUSH0;
                    SLOAD;
                    PUSH1 164;
                    MSTORE;

                    PUSH1 4;
                    CALLDATALOAD;
                    PUSH1 128;
                    MSTORE;
                }

                readTransferErc721Entry;
            }
        }
    }
}

